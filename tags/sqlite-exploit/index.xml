<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>sqlite exploit on msh1307</title>
    <link>https://msh1307.kr/tags/sqlite-exploit/</link>
    <description>Recent content in sqlite exploit on msh1307</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://msh1307.kr/tags/sqlite-exploit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Iris CTF 2024 - sqlite3 vm pwn</title>
      <link>https://msh1307.kr/blog/iris_ctf_2024/</link>
      <pubDate>Sun, 10 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://msh1307.kr/blog/iris_ctf_2024/</guid>
      <description>DeadSec으로 참여했다. 당시엔 팀원분이 풀어주셔서 넘겼지만, sqlite3라 꼭 혼자 풀어보고싶었다.
sequilitis SQL query를 만들고 실행시키는 프로그램이다.
Analysis chal 여러 옵션이 존재한다. 먼저 sqlite3는 오픈소스이고 소스코드도 주어지기 때문에 일단 컴파일을 하고 구조체나 enum을 IDA로 import 했다. inscribe 옵션에서 sqlite3의 vm 코드를 수정할 수 있는 취약점이있다. 그리고 execute로 실행하고 나면 column type에 따라 값들이 리턴된다.
sqlite3 sqlite3의 vmcode들을 분석해야한다.
/* forward declaration */ static int sqlite3Prepare( sqlite3 *db, /* Database handle. */ const char *zSql, /* UTF-8 encoded SQL statement.</description>
    </item>
    
  </channel>
</rss>
