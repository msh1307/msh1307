<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux kernel on msh1307</title>
    <link>https://msh1307.kr/tags/linux-kernel/</link>
    <description>Recent content in Linux kernel on msh1307</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://msh1307.kr/tags/linux-kernel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux kernel SLUB allocator</title>
      <link>https://msh1307.kr/blog/linux-kernel-slub-allocator/</link>
      <pubDate>Tue, 12 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://msh1307.kr/blog/linux-kernel-slub-allocator/</guid>
      <description>SLUB Allocator Userland에선 ptmalloc2가 있는 반면, Kernelland에선 SLUB이 있다. 초기엔 SLAB Allocator를 사용했지만, 현재 대부분의 배포판은 SLUB을 이용한다. 기존 SLAB allocator의 단점을 개선한 버전이다. kmem_cache_create로 slab cache를 생성하고 kmem_cache_alloc으로 지정된 slab cache에서 object를 할당한다. kmem_cache_free로 free하고 kmem_cache_destroy로 slab cache를 제거한다. kmalloc, kzalloc 같은 함수는 kmalloc-N 캐시에서 적합한 size인 object를 할당한다.
Terms slab SLAB allocator랑 다른말이다. slab cache (= kmem_cache)를 확보하고 관리하는 주체다.
slab cache msh@raspberrypi:~ $ sudo cat /proc/slabinfo slabinfo - version: 2.</description>
    </item>
    
    <item>
      <title>CVE-2022-1015 Linux kernel netfilter</title>
      <link>https://msh1307.kr/blog/cve-2022-1015-linux-kernel-netfilter/</link>
      <pubDate>Sun, 10 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://msh1307.kr/blog/cve-2022-1015-linux-kernel-netfilter/</guid>
      <description>Backgrounds Capabilites 요즘 리눅스들은 단순 root VS normal user가 아니다. capabilities로 나뉘어져 권한이 부여된다. 즉 root를 통째로 주지 않고 미세한 capability를 부여해서 리스크를 최소화 시킨다.
Namespace namespace는 일종의 보안적인 요소들같은 것들을 모두 격리시키는 공간? 이다. 여기엔 UID GID cred keys capabilites 등이 모두 포함된다.
nested namespace 유저의 namespace는 중첩될 수 있다. 그 뜻은 initial root를 제외한 네임스페이스가 부모 namespace를 갖는다는 뜻이다. 0개 혹은 더 많은 child namespace를 가질 수 있다. parent user namespace는 unshare나 clone에 CLONE_NEWUSER flag를 집어서 호출하는 namespace이다.</description>
    </item>
    
    <item>
      <title>CVE-2022-42432 Linux kernel netfilter</title>
      <link>https://msh1307.kr/blog/cve-2022-42432-linux-kernel-netfilter/</link>
      <pubDate>Sun, 10 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://msh1307.kr/blog/cve-2022-42432-linux-kernel-netfilter/</guid>
      <description>CVE-2022-42432 struct expr_ops expr_ops_osf = { .name	= &amp;#34;osf&amp;#34;, .alloc_len	= sizeof(struct nftnl_expr_osf), .max_attr	= NFTA_OSF_MAX, .set	= nftnl_expr_osf_set, .get	= nftnl_expr_osf_get, .parse	= nftnl_expr_osf_parse, .build	= nftnl_expr_osf_build, .output	= nftnl_expr_osf_snprintf, }; libnftnl 소스코드에서 osf expr도 지원한다는 것을 알 수 있었다.
struct nftnl_expr_osf { enum nft_registers	dreg; uint8_t	ttl; uint32_t	flags; }; static int nftnl_expr_osf_set(struct nftnl_expr *e, uint16_t type, const void *data, uint32_t data_len) { struct nftnl_expr_osf *osf = nftnl_expr_data(e); switch(type) { case NFTNL_EXPR_OSF_DREG: memcpy(&amp;amp;osf-&amp;gt;dreg, data, sizeof(osf-&amp;gt;dreg)); break; case NFTNL_EXPR_OSF_TTL: memcpy(&amp;amp;osf-&amp;gt;ttl, data, sizeof(osf-&amp;gt;ttl)); break; case NFTNL_EXPR_OSF_FLAGS: memcpy(&amp;amp;osf-&amp;gt;flags, data, sizeof(osf-&amp;gt;flags)); break; } return 0; } nf tables에서 expr 추가하듯이 추가하면 된다.</description>
    </item>
    
    <item>
      <title>Linux kernel module programming</title>
      <link>https://msh1307.kr/blog/linux_kernel_module_programming/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://msh1307.kr/blog/linux_kernel_module_programming/</guid>
      <description>Kernel module? 모듈은 사용자의 혹은 커널의 요구로 읽혀지거나 아니면 없어지는 코드들로 이루어진 프로그램의 어떤 한 조각을 의미한다. 커널은 하나의 큰 모듈들의 집합이라고 볼 수 있다. 모듈들을 통해서 필요할때 더 추가, 혹은 제거를 통해서 커널을 재컴파일 혹은 재가동하지 않고도 커널의 기능을 확장하거나 축소시킬 수 있다.
lsmod insmod rmmod lsmod를 통해서 현재 커널에 있는 모듈들의 정보를 확인할 수 있다. 이때 lsmod는 /proc/modules를 읽고나서 좀 더 예쁘게 바꿔준다. insmod를 통해서 커널에 모듈을 적재할 수 있다.</description>
    </item>
    
  </channel>
</rss>
