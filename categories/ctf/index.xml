<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CTF on msh1307</title>
    <link>https://msh1307.kr/categories/ctf/</link>
    <description>Recent content in CTF on msh1307</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://msh1307.kr/categories/ctf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LACTF 2024 - ppplot</title>
      <link>https://msh1307.kr/blog/lactf_2024_ppplot/</link>
      <pubDate>Sun, 10 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://msh1307.kr/blog/lactf_2024_ppplot/</guid>
      <description>ppplot Analysis int __fastcall arith(int flag) { uint64_t *v1; // rax unsigned int res; // eax char v3; // cl int i; // [rsp+1Ch] [rbp-14h] int idx; // [rsp+20h] [rbp-10h] unsigned int v7; // [rsp+24h] [rbp-Ch] eq_obj *obj; // [rsp+28h] [rbp-8h] printf(&amp;#34;idx: &amp;#34;); idx = read_int(); if ( (unsigned int)idx &amp;lt; 128 ) { v1 = (uint64_t *)obj_list_[idx]; obj = (eq_obj *)v1; for ( i = 0; i &amp;lt;= 63; ++i ) { res = calc(obj, i - 0x20); v7 = res + 0x20; LODWORD(v1) = printf(&amp;#34;(%d, %d)\n&amp;#34;, (unsigned int)(i - 0x20), res); if ( v7 &amp;lt;= 0x3F ) { if ( flag ) v3 = &amp;#39;.</description>
    </item>
    
    <item>
      <title>Dreamhack Kaist Postech CTF</title>
      <link>https://msh1307.kr/blog/dreamhack_kaist_postech_ctf_2023/</link>
      <pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://msh1307.kr/blog/dreamhack_kaist_postech_ctf_2023/</guid>
      <description>개인전으로 2위를 했다. 2022, 2023 kaist postech ctf 모든 포너블 챌린지를 해결했고 리버싱 챌린지 하나를 해결했다.
sonofthec Analysis 인터넷 검색을 통해 enum을 복구한다. methods_fn[0] = (__int64)exit_with_code; methods_fn[1] = (__int64)register; methods_fn[2] = (__int64)login; methods_fn[3] = (__int64)token_status; methods_fn[4] = (__int64)update; methods_fn[5] = (__int64)logout; result = upload; methods_fn[6] = (__int64)upload; json으로 입력을 받고 그에 따른 핸들러를 호출한다.
read_secret(); args = json_object_object_get(json_obj, &amp;#34;args&amp;#34;); STR = (std::chrono::_V2::system_clock *)json_object_object_get(args, &amp;#34;username&amp;#34;); chk_string((__int64)STR); object.username = json_object_get_string(STR); usr_name_len = strlen((const char *)object.</description>
    </item>
    
    <item>
      <title>CODEGATE 2023 Quals</title>
      <link>https://msh1307.kr/blog/codegate_junior_2023_quals/</link>
      <pubDate>Sat, 24 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://msh1307.kr/blog/codegate_junior_2023_quals/</guid>
      <description>PCPU 대회 끝나기 2시간정도 전에 잡았었는데, 분석하기 빡세고 구조체도 많아서 시간내로 못풀었다. 나중에 끝나고 천천히 풀어봤다. 파이프라이닝이 적용된 VCPU 컨셉의 문제다.
Analysis __int64 __fastcall main(int a1, char **a2, char **a3) { init_(); input_validchk(); // opcode(1byte) | operands(3bytes) while ( PC &amp;lt;= instr_sz ) { run_cycle(); ++PC; } run_cycle(); run_cycle(); run_cycle(); print_cycle(); return 0LL; } int init_() { unsigned int v0; // eax v0 = time(0LL); srand(v0); setvbuf(stdin, 0LL, 2, 0LL); setvbuf(stdout, 0LL, 2, 0LL); IF_NODE = malloc(0x10uLL); ID_NODE = malloc(0x10uLL); OF_NODE = malloc(0x10uLL); EX_NODE = malloc(0x10uLL); REG = malloc(0x20uLL); memset(REG, 0, sizeof(REG_SETS)); init_m(IF_NODE); init_m(ID_NODE); init_m(OF_NODE); init_m(EX_NODE); ANON.</description>
    </item>
    
    <item>
      <title>CCE 2023 Quals</title>
      <link>https://msh1307.kr/blog/cce_2023_junior_quals/</link>
      <pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://msh1307.kr/blog/cce_2023_junior_quals/</guid>
      <description>K-Exploit 처음으로 잡아본 커널 문제다. 대회끝나고 50분뒤에 플래그가 나왔다. 아침에 BoB 필기랑 인적성보고 풀려했는데, 대회가 너무 빨리 끝났다. ;;
Analysis rootfs.img.gz 파일 시스템이 주어지고 bzImage가 주어진다.
local_run.sh #!/bin/sh qemu-system-x86_64 \ -m 128M \ -cpu kvm64,+smep,+smap \ -kernel bzImage \ -initrd rootfs.img.gz \ -snapshot \ -nographic \ -monitor /dev/null \ -no-reboot \ -append &amp;#34;console=ttyS0 kaslr kpti=1 quiet panic=1&amp;#34; \ -s kaslr, kpti, smep, smap 다 빡세게 걸려있다.
server_run.sh #!/bin/sh qemu-system-x86_64 \ -m 128M \ -cpu kvm64,+smep,+smap \ -kernel bzImage \ -initrd $1 \ -snapshot \ -nographic \ -monitor /dev/null \ -no-reboot \ -append &amp;#34;console=ttyS0 kaslr kpti=1 quiet panic=1&amp;#34; 똑같은데 디버깅 옵션만 빠진거같다.</description>
    </item>
    
    <item>
      <title>TJCTF 2023 - Painter</title>
      <link>https://msh1307.kr/blog/tjctf_2023_painter/</link>
      <pubDate>Mon, 29 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://msh1307.kr/blog/tjctf_2023_painter/</guid>
      <description>painter 유사 그림판 컨셉인듯 하다. Web Assembly 익스플로잇해서 admin bot의 쿠키 탈취가 목적이다. Wasm 취약점 분석은 처음 해봐서 생소했다. admin-bot.js 파일과 dockerfile, app.py, index.wasm 등이 주어진다.
Analysis admin-bot.js import flag from &amp;#39;./flag.txt&amp;#39;; function sleep(time) { return new Promise(resolve =&amp;gt; { setTimeout(resolve, time); }); } export default { id: &amp;#39;painter&amp;#39;, name: &amp;#39;painter&amp;#39;, urlRegex: /^https:\/\/painter\.tjc\.tf\//, timeout: 10000, handler: async (url, ctx) =&amp;gt; { const page = await ctx.newPage(); await page.goto(&amp;#39;https://painter.tjc.tf&amp;#39;, { waitUntil: &amp;#39;domcontentloaded&amp;#39; }); await page.</description>
    </item>
    
    <item>
      <title>Kalmar CTF 2023 - MJS</title>
      <link>https://msh1307.kr/blog/kalmar_ctf_2023_mjs/</link>
      <pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://msh1307.kr/blog/kalmar_ctf_2023_mjs/</guid>
      <description>MJS CTF 당시에는 warm-up인데 자바스크립트 엔진이라 도망갔다. 구글링 잘했으면 바로 풀 수 있었을 것 같다.
Analysis FROM ubuntu:22.04 ENV DEBIAN_FRONTEND noninteractive RUN apt-get update RUN apt-get install -y xinetd python3 xxd COPY mjs / COPY ynetd / COPY remote.py / RUN echo &amp;#34;kalmar{redacted}&amp;#34; &amp;gt; /flag-$(head -c 16 /dev/urandom | xxd -p).txt USER 1000:1000 EXPOSE 10002 CMD ./ynetd -p 10002 &amp;#34;timeout 60 ./remote.py&amp;#34; 22.04이다.
diff --git a/Makefile b/Makefile index d265d7e..d495e84 100644 --- a/Makefile +++ b/Makefile @@ -5,6 +5,7 @@ BUILD_DIR = build RD ?</description>
    </item>
    
    <item>
      <title>RealWorld CTF 2023 - NoneHeavyFTP</title>
      <link>https://msh1307.kr/blog/realworld_ctf_2023_noneheavyftp/</link>
      <pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://msh1307.kr/blog/realworld_ctf_2023_noneheavyftp/</guid>
      <description>NonHeavyFTP 난이도가 Baby인거 보고 달려들었는데, 어려웠다.
Analysis [ftpconfig] port=2121 maxusers=10000000 interface=0.0.0.0 local_mask=255.255.255.255 minport=30000 maxport=60000 goodbyemsg=Goodbye! keepalive=1 [anonymous] pswd=* accs=readonly root=/server/data/ ftp 서비스의 config 파일이다.
FROM ubuntu:22.04 ENV DEBIAN_FRONTEND noninteractive RUN apt-get update &amp;amp;&amp;amp;\ apt-get install -y --no-install-recommends wget unzip gcc make libc6-dev gnutls-dev uuid RUN mkdir -p /server/data/ &amp;amp;&amp;amp;\ echo &amp;#34;hello from LightFTP&amp;#34; &amp;gt;&amp;gt; /server/data/hello.txt &amp;amp;&amp;amp;\ cd /server &amp;amp;&amp;amp;\ wget --no-check-certificate https://codeload.github.com/hfiref0x/LightFTP/zip/refs/tags/v2.2 -O LightFTP-2.2.zip &amp;amp;&amp;amp;\ unzip LightFTP-2.2.zip &amp;amp;&amp;amp;\ cd LightFTP-2.2/Source/Release &amp;amp;&amp;amp;\ make &amp;amp;&amp;amp;\ cp -a .</description>
    </item>
    
  </channel>
</rss>
