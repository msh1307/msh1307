<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CTF on msh1307</title>
    <link>https://msh1307.kr/categories/ctf/</link>
    <description>Recent content in CTF on msh1307</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://msh1307.kr/categories/ctf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Google CTF 2024 - UNICORNEL</title>
      <link>https://msh1307.kr/blog/google_ctf_2024_unicornel/</link>
      <pubDate>Tue, 25 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>https://msh1307.kr/blog/google_ctf_2024_unicornel/</guid>
      <description>UNICORNEL Cold Fusion 연합팀으로 Google ctf에 참여했다. 늦잠자서 늦게 합류했는데, 이미 팀원분이 취약점을 찾아놓으셔서 어떻게 악용할지를 중점적으로 생각하고 익스플로잇을 작성해서 챌린지를 해결했다.
Analysis ==== About ==== Unicornel is a multi-process, multi-architecture emulator server with concurrency and system call support. All processes of any architecture share the underlying kernel, and can interact with each other via system calls and in particular a lightweight shared memory interface. ==== Starting processes ==== In order to start a new process, you must first send a unicornelf header, which naturally bears no resemblance whatsoever to the actual ELF standard: struct unicornelf { uc_arch arch; //Desired unicorn-supported ISA uc_mode mode; //Desired unicorn-supported mode struct { unsigned long va; //Virtual address to map unsigned long length; //Length of memory to map } maps[4]; //Up to 4 mappings supported unsigned short code_length; //The length of the code to follow the unicornelf header unsigned char num_maps; //The number of mappings initialized in the maps array }; Following the unicornelf header should be &amp;lt;code length&amp;gt; bytes of assembled machine code in the specified instruction set architecture.</description>
    </item>
    
    <item>
      <title>HITCON CTF 2018 - SuperHexagon</title>
      <link>https://msh1307.kr/blog/hitcon_2018_superhexagon/</link>
      <pubDate>Tue, 25 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>https://msh1307.kr/blog/hitcon_2018_superhexagon/</guid>
      <description>오랜만에 한꺼번에 블로그 글을 쓰게 되었다. 이번년도 초에 Theori에서 과제로 superhexagon을 풀면서 관련 CS를 한달간 공부해오는 것을 과제로 받았다. 글에서 언급하는 background 내용은 다른 글에서 따로 정리되어있다.
Overview diff -Naur &amp;#39;--exclude=tests&amp;#39; &amp;#39;--exclude=roms&amp;#39; &amp;#39;--exclude=capstone&amp;#39; &amp;#39;--exclude=docs&amp;#39; ../temp/qemu-3.0.0/hw/arm/hitcon.c qemu/hw/arm/hitcon.c --- ../temp/qemu-3.0.0/hw/arm/hitcon.c	1969-12-31 16:00:00.000000000 -0800 +++ qemu/hw/arm/hitcon.c	2018-10-19 10:49:59.412023642 -0700 @@ -0,0 +1,208 @@ +#include &amp;#34;qemu/osdep.h&amp;#34; +#include &amp;#34;qapi/error.h&amp;#34; +#include &amp;#34;qemu-common.h&amp;#34; +#include &amp;#34;cpu.h&amp;#34; +#include &amp;#34;hw/sysbus.h&amp;#34; +#include &amp;#34;hw/devices.h&amp;#34; +#include &amp;#34;hw/boards.h&amp;#34; +#include &amp;#34;hw/arm/arm.h&amp;#34; +#include &amp;#34;hw/misc/arm_integrator_debug.h&amp;#34; +#include &amp;#34;net/net.h&amp;#34; +#include &amp;#34;exec/address-spaces.</description>
    </item>
    
    <item>
      <title>Bi0s CTF 2024 - KowaiiVM</title>
      <link>https://msh1307.kr/blog/bi0s_ctf_2024_kowaiivm/</link>
      <pubDate>Wed, 20 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://msh1307.kr/blog/bi0s_ctf_2024_kowaiivm/</guid>
      <description>Kowaii VM Analysis 문제에서 소스코드를 제공해준다.
---- 0x0000 Header data ---- 0x1000 .CODE ---- bss &amp;gt;= 0xc000 .BSS ---- 0xffff 위와 같은 바이너리 구조를 입력으로 받는다.
class kowaiiCtx { private: void *genAddr() { u64 r = 0; do r = (u64)rand(); while((int)r &amp;lt; 0); return (void *)(r &amp;lt;&amp;lt; 12); } public: kowaiiBin *bin; kowaiiRegisters *regs; kowaiiFuncEntry **callStack; kowaiiFuncEntry **callStackBase; u8 *bss; u8 *jitBase; u8 *jitEnd; kowaiiCtx() { this-&amp;gt;bin = (kowaiiBin *)mmap(this-&amp;gt;genAddr(), MAX_BIN_SIZE, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANON, -1, 0); this-&amp;gt;regs = (kowaiiRegisters *)calloc(1,sizeof(kowaiiRegisters)); if(this-&amp;gt;bin == (void *)-1 || this-&amp;gt;regs == NULL) error(&amp;#34;Memory error!</description>
    </item>
    
    <item>
      <title>Iris CTF 2024</title>
      <link>https://msh1307.kr/blog/iris_ctf_2024/</link>
      <pubDate>Sun, 10 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://msh1307.kr/blog/iris_ctf_2024/</guid>
      <description>DeadSec으로 참여했다. 당시엔 팀원분이 풀어주셔서 넘겼지만, sqlite3라 꼭 혼자 풀어보고싶었다.
sequilitis SQL query를 만들고 실행시키는 프로그램이다.
Analysis chal 여러 옵션이 존재한다. 먼저 sqlite3는 오픈소스이고 소스코드도 주어지기 때문에 일단 컴파일을 하고 구조체나 enum을 IDA로 import 했다. inscribe 옵션에서 sqlite3의 vm 코드를 수정할 수 있는 취약점이있다. 그리고 execute로 실행하고 나면 column type에 따라 값들이 리턴된다.
sqlite3 sqlite3의 vmcode들을 분석해야한다.
/* forward declaration */ static int sqlite3Prepare( sqlite3 *db, /* Database handle. */ const char *zSql, /* UTF-8 encoded SQL statement.</description>
    </item>
    
    <item>
      <title>LACTF 2024 - ppplot</title>
      <link>https://msh1307.kr/blog/lactf_2024_ppplot/</link>
      <pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://msh1307.kr/blog/lactf_2024_ppplot/</guid>
      <description>ppplot Analysis int __fastcall arith(int flag) { uint64_t *v1; // rax unsigned int res; // eax char v3; // cl int i; // [rsp+1Ch] [rbp-14h] int idx; // [rsp+20h] [rbp-10h] unsigned int v7; // [rsp+24h] [rbp-Ch] eq_obj *obj; // [rsp+28h] [rbp-8h] printf(&amp;#34;idx: &amp;#34;); idx = read_int(); if ( (unsigned int)idx &amp;lt; 128 ) { v1 = (uint64_t *)obj_list_[idx]; obj = (eq_obj *)v1; for ( i = 0; i &amp;lt;= 63; ++i ) { res = calc(obj, i - 0x20); v7 = res + 0x20; LODWORD(v1) = printf(&amp;#34;(%d, %d)\n&amp;#34;, (unsigned int)(i - 0x20), res); if ( v7 &amp;lt;= 0x3F ) { if ( flag ) v3 = &amp;#39;.</description>
    </item>
    
    <item>
      <title>Dreamhack Kaist Postech CTF</title>
      <link>https://msh1307.kr/blog/dreamhack_kaist_postech_ctf_2023/</link>
      <pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://msh1307.kr/blog/dreamhack_kaist_postech_ctf_2023/</guid>
      <description>개인전으로 2위를 했다. 2022, 2023 kaist postech ctf 모든 포너블 챌린지를 해결했고 리버싱 챌린지 하나를 해결했다.
sonofthec Analysis 인터넷 검색을 통해 enum을 복구한다. methods_fn[0] = (__int64)exit_with_code; methods_fn[1] = (__int64)register; methods_fn[2] = (__int64)login; methods_fn[3] = (__int64)token_status; methods_fn[4] = (__int64)update; methods_fn[5] = (__int64)logout; result = upload; methods_fn[6] = (__int64)upload; json으로 입력을 받고 그에 따른 핸들러를 호출한다.
read_secret(); args = json_object_object_get(json_obj, &amp;#34;args&amp;#34;); STR = (std::chrono::_V2::system_clock *)json_object_object_get(args, &amp;#34;username&amp;#34;); chk_string((__int64)STR); object.username = json_object_get_string(STR); usr_name_len = strlen((const char *)object.</description>
    </item>
    
    <item>
      <title>CODEGATE 2023 Quals</title>
      <link>https://msh1307.kr/blog/codegate_junior_2023_quals/</link>
      <pubDate>Sat, 24 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://msh1307.kr/blog/codegate_junior_2023_quals/</guid>
      <description>PCPU 대회 끝나기 2시간정도 전에 잡았었는데, 분석하기 빡세고 구조체도 많아서 시간내로 못풀었다. 나중에 끝나고 천천히 풀어봤다. 파이프라이닝이 적용된 VCPU 컨셉의 문제다.
Analysis __int64 __fastcall main(int a1, char **a2, char **a3) { init_(); input_validchk(); // opcode(1byte) | operands(3bytes) while ( PC &amp;lt;= instr_sz ) { run_cycle(); ++PC; } run_cycle(); run_cycle(); run_cycle(); print_cycle(); return 0LL; } int init_() { unsigned int v0; // eax v0 = time(0LL); srand(v0); setvbuf(stdin, 0LL, 2, 0LL); setvbuf(stdout, 0LL, 2, 0LL); IF_NODE = malloc(0x10uLL); ID_NODE = malloc(0x10uLL); OF_NODE = malloc(0x10uLL); EX_NODE = malloc(0x10uLL); REG = malloc(0x20uLL); memset(REG, 0, sizeof(REG_SETS)); init_m(IF_NODE); init_m(ID_NODE); init_m(OF_NODE); init_m(EX_NODE); ANON.</description>
    </item>
    
    <item>
      <title>CCE 2023 Quals</title>
      <link>https://msh1307.kr/blog/cce_2023_junior_quals/</link>
      <pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://msh1307.kr/blog/cce_2023_junior_quals/</guid>
      <description>K-Exploit 처음으로 잡아본 커널 문제다. 대회끝나고 50분뒤에 플래그가 나왔다. 아침에 BoB 필기랑 인적성보고 풀려했는데, 대회가 너무 빨리 끝났다. ;;
Analysis rootfs.img.gz 파일 시스템이 주어지고 bzImage가 주어진다.
local_run.sh #!/bin/sh qemu-system-x86_64 \ -m 128M \ -cpu kvm64,+smep,+smap \ -kernel bzImage \ -initrd rootfs.img.gz \ -snapshot \ -nographic \ -monitor /dev/null \ -no-reboot \ -append &amp;#34;console=ttyS0 kaslr kpti=1 quiet panic=1&amp;#34; \ -s kaslr, kpti, smep, smap 다 빡세게 걸려있다.
server_run.sh #!/bin/sh qemu-system-x86_64 \ -m 128M \ -cpu kvm64,+smep,+smap \ -kernel bzImage \ -initrd $1 \ -snapshot \ -nographic \ -monitor /dev/null \ -no-reboot \ -append &amp;#34;console=ttyS0 kaslr kpti=1 quiet panic=1&amp;#34; 똑같은데 디버깅 옵션만 빠진거같다.</description>
    </item>
    
    <item>
      <title>TJCTF 2023 - Painter</title>
      <link>https://msh1307.kr/blog/tjctf_2023_painter/</link>
      <pubDate>Mon, 29 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://msh1307.kr/blog/tjctf_2023_painter/</guid>
      <description>painter 유사 그림판 컨셉인듯 하다. Web Assembly 익스플로잇해서 admin bot의 쿠키 탈취가 목적이다. Wasm 취약점 분석은 처음 해봐서 생소했다. admin-bot.js 파일과 dockerfile, app.py, index.wasm 등이 주어진다.
Analysis admin-bot.js import flag from &amp;#39;./flag.txt&amp;#39;; function sleep(time) { return new Promise(resolve =&amp;gt; { setTimeout(resolve, time); }); } export default { id: &amp;#39;painter&amp;#39;, name: &amp;#39;painter&amp;#39;, urlRegex: /^https:\/\/painter\.tjc\.tf\//, timeout: 10000, handler: async (url, ctx) =&amp;gt; { const page = await ctx.newPage(); await page.goto(&amp;#39;https://painter.tjc.tf&amp;#39;, { waitUntil: &amp;#39;domcontentloaded&amp;#39; }); await page.</description>
    </item>
    
    <item>
      <title>Kalmar CTF 2023 - MJS</title>
      <link>https://msh1307.kr/blog/kalmar_ctf_2023_mjs/</link>
      <pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://msh1307.kr/blog/kalmar_ctf_2023_mjs/</guid>
      <description>MJS CTF 당시에는 warm-up인데 자바스크립트 엔진이라 도망갔다. 구글링 잘했으면 바로 풀 수 있었을 것 같다.
Analysis FROM ubuntu:22.04 ENV DEBIAN_FRONTEND noninteractive RUN apt-get update RUN apt-get install -y xinetd python3 xxd COPY mjs / COPY ynetd / COPY remote.py / RUN echo &amp;#34;kalmar{redacted}&amp;#34; &amp;gt; /flag-$(head -c 16 /dev/urandom | xxd -p).txt USER 1000:1000 EXPOSE 10002 CMD ./ynetd -p 10002 &amp;#34;timeout 60 ./remote.py&amp;#34; 22.04이다.
diff --git a/Makefile b/Makefile index d265d7e..d495e84 100644 --- a/Makefile +++ b/Makefile @@ -5,6 +5,7 @@ BUILD_DIR = build RD ?</description>
    </item>
    
    <item>
      <title>RealWorld CTF 2023 - NoneHeavyFTP</title>
      <link>https://msh1307.kr/blog/realworld_ctf_2023_noneheavyftp/</link>
      <pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://msh1307.kr/blog/realworld_ctf_2023_noneheavyftp/</guid>
      <description>NonHeavyFTP 난이도가 Baby인거 보고 달려들었는데, 어려웠다.
Analysis [ftpconfig] port=2121 maxusers=10000000 interface=0.0.0.0 local_mask=255.255.255.255 minport=30000 maxport=60000 goodbyemsg=Goodbye! keepalive=1 [anonymous] pswd=* accs=readonly root=/server/data/ ftp 서비스의 config 파일이다.
FROM ubuntu:22.04 ENV DEBIAN_FRONTEND noninteractive RUN apt-get update &amp;amp;&amp;amp;\ apt-get install -y --no-install-recommends wget unzip gcc make libc6-dev gnutls-dev uuid RUN mkdir -p /server/data/ &amp;amp;&amp;amp;\ echo &amp;#34;hello from LightFTP&amp;#34; &amp;gt;&amp;gt; /server/data/hello.txt &amp;amp;&amp;amp;\ cd /server &amp;amp;&amp;amp;\ wget --no-check-certificate https://codeload.github.com/hfiref0x/LightFTP/zip/refs/tags/v2.2 -O LightFTP-2.2.zip &amp;amp;&amp;amp;\ unzip LightFTP-2.2.zip &amp;amp;&amp;amp;\ cd LightFTP-2.2/Source/Release &amp;amp;&amp;amp;\ make &amp;amp;&amp;amp;\ cp -a .</description>
    </item>
    
  </channel>
</rss>
